1. With delegates we can specify the logic of a specific method without hard coding it, this will allow developers to define the logic and pass it to the method they need to use.

using System;
using System.Collections.Generic;

namespace testconsole
{
   // First declare the delegate 
   public delegate bool IsPromotable(Delton delton);
    public class Delton
    {
 public int Id { get; set; }
        public string Name { get; set; }

        public void MustBeInsured(List<Insurance> insurances, VerifyInsurance verify)
        {
            foreach (var i in insurances)
            {
                //Now the delegate is being used to define the argument of the if statement. So a developer could say        
                {
                    Console.WriteLine($"{i.Name} must be insured.");
                }
            }
        }

    }
}

2. Now in this class we use the delegate as an argument and pass it to the fucntion above.
static void Main(string[] args)
        {
            List<Insurance> insurance = new List<Insurance>
            {
                new Insurance{Id = 1, Name = "Exa"},
                new Insurance{Id = 2, Name = "Sumt"},
                new Insurance{Id = 3, Name = "KH"},
                new Insurance{Id = 4, Name = "Ra"},
            };
            var i = new Insurance();
            // Below we use a lambda function instead of a delegate function.
            i.MustBeInsured(insurance, c => c.Name == "Exa" || c.Name == "KH");
        }
