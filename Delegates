1. With delegates we can specify the logic of a specific method without hard coding it, this will allow developers to define the logic and pass it to the method they need to use.

using System;
using System.Collections.Generic;

namespace testconsole
{
   // First declare the delegate 
   public delegate bool IsPromotable(Delton delton);
    public class Delton
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Salary { get; set; }
        public int Expereince { get; set; }
        public Delton(int id, string name, int sal, int exp)
        {
            Id = id;
            Name = name;
            Salary = sal;
            Expereince = exp;
        }
        public Delton()
        {

        }
        //Pass the delegate to the method you wish to use.
        public void PromoteEmployee(List<Delton> deltons, IsPromotable isPromotable)
        {
            foreach (Delton d in deltons)
            {
                //Now the delegate is being used to define the argument of the if statement. So a developer could say                         "if(user>=17){promote them}" another developer could pass in something different such as "if(user>=19){promote                  them}"
                if(isPromotable(d))
                {
                    Console.WriteLine($"{d.Name} can now be promoted.");
                }
            }
        }

    }
}

2. Now in this class we use the delegate as an argument and pass it to the fucntion above.
static void Main(string[] args)
        {
            List<Delton> deltonList = new List<Delton>
            {
                new Delton(1, "Jane", 98, 5),
                new Delton(2, "Jim", 938, 6),
                new Delton(2, "Sandy", 18, 2),
            };
            var d = new Delton();
            // Below we use a lambda function instead of a delegate function.
            d.PromoteEmployee(deltonList, x => x.Expereince >= 3);
        }
