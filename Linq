//lets find all cars that are newer than 1990 the old way we would need to use a foreach and if 
         var car = new CarDepo().GetCar();
            var oldCar = new List<Car>();

            foreach (var cars in car)
            {
                if (cars.Year > 1990)
                {
                    oldCar.Add(cars);
                }
            }
 
 //usuing Linq we can use the where statement in combination with Lambda Exression
  var cartwo = new CarDepo().GetCar();
  var oldCarTwo = cartwo.Where(c => c.Year > 1990);
  
  //to display the data on the screen we have to find a variable associated with the object, belowe we will bypass this using Linq Select
   foreach (var old in oldCarTwo)
            {
                Console.WriteLine(old.Model);
            }
         
  
  //using linq and lambda expressions we can find the cars newer then 1990 and order aplhabetically using the keyword OrderBy
  //select takes the data type of model and tharfore turns the list into a string we can now remove .Model from the  
  //Console.WriteLine(old.Model); on line 20 we could use .Year and turn it into an int!
            var oldCarTwo = cartwo.Where(c => c.Year > 1990).OrderBy(c => c.Model).Select(c => c.Model);
             foreach (var old in oldCarTwo)
            {
                Console.WriteLine(old);
            }
 
 //in a realworld application we use the below format called Linq Extension Methods
    var oldCarTwo = cartwo
                .Where(c => c.Year > 1990)
                .OrderBy(c => c.Model)
                .Select(c => c.Year);
     
    
    
    
    
   //below we use linq query operators instead of the linq extension methods above
            var books = new BookRepository().GetBooks();
            var cheapbooks = from b in books
                             where b.Price < 10
                             orderby b.Title
                             select b.Title;

            foreach(var book in cheapbooks)
            {
                Console.WriteLine(book);
            }
        
 
 
 
 
   static void Main(string[] args)

        {

            var cars = new CarDepo().GetCar();
            //below will find the car within the list with the exact name we enter
            var vehicle = cars.SingleOrDefault(car => car.Model == "wdbiuw");
            Console.WriteLine(vehicle.Year);
            //below will display the first car in the list
            var firstVehicle = cars.FirstOrDefault();
            Console.WriteLine(firstVehicle.Model);
            var book = new BookRepository().GetBooks();
            //below will display the last car in the list
            var lastbook = book.Last();
            Console.WriteLine(lastbook.Title);
            //skip and take used below will skip over two in the list and then print the following 3 
            var trys = book.Skip(2).Take(3);
            foreach (var t in trys)
            {
                Console.WriteLine(t.Title);
            }
            //count will count how many items we have in a list 
            var count = book.Count();
            Console.WriteLine(count);
            //min and max will give us the least and most expensive book, sum and avergae are self explanitory 
            var mostExpensiveBook = book.Max(b => b.Price);
            var leastExpensiveBook = book.Min(b => b.Price);
            var sum = book.Sum(b => b.Price);
            var average = book.Average(b => b.Price);
            Console.WriteLine(mostExpensiveBook);
            Console.WriteLine(leastExpensiveBook);
            Console.WriteLine(sum);
            Console.WriteLine(average);
           
            
          

            Console.ReadKey();
        }
   
 
